#lang racket
(require (lib "math.ss"))

; Hilfsfunktion
(define (quad x) (* x x))


; a)
(define (zylVol radius hoehe) (* pi (quad radius) hoehe))
(define (zylOber radius hoehe) (+ (* pi (quad radius) 2) (* 2 pi radius hoehe)))
(define (kugVol radius ) (* pi (/ 4 3) (* radius (quad radius))))
(define (kugOber radius ) (* pi (quad radius) 4))

; b)
(define nord 350)
(define sued 100)
(define west 30)
(define ost 220)
(define (innen x y) (and (<= x ost) (>= x west) (<= y nord) (>= sued)))

; c)
(define (monoton_wachsend a b c) (and (<= a b c)))

; tests
(display "(zylVol  3 5) = ")
(display (zylVol 3 5))
(newline)
(display "(zylOber  3 5) = ")
(display (zylOber 3 5))
(newline)
(display "(kugVol  3) = ")
(display (kugVol 3 ))
(newline)
(display "(kugOber  3) = ")
(display (kugOber 3 ))
(newline)
(newline)

(display "(innen  50 150) = ")
(display (innen 50 150))
(newline)
(display "(innen  20 150) = ")
(display (innen 20 150))
(newline)
(display "(innen  50 400) = ")
(display (innen 50 400))
(newline)
(display "(innen  20 400) = ")
(display (innen 20 400))
(newline)
(display "(innen 200 180) = ")
(display (innen 200 180))
(newline)
(display "(innen  30 350) = ")
(display (innen 30 350))
(newline)

(newline)
(display "(monoton_wachsend 1 2 2) = ")
(display (monoton_wachsend 1 2 2))
(newline)
(display "(monoton_wachsend 3 2 4) = ")
(display (monoton_wachsend 3 2 4))
(newline)